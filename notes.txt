Notes:
    - Gonna need additional tri-state (dashed color) and conflict (red color) wire states. These will save as unpowered wires.
    - During simulation, if conflicting states occur then pause and show an error (a setting will be available to turn this off).
    - Implement the original wire algorithm first (without the additional states) for backwards compatibility.

Simulation algorithm (version 1):
    - Assume one set of cosmetic and state updates for all objects that update (tileUpdates).
    - At start of frame, we already know every object that has received an update and may change state.
    - Basic idea is to crawl along each wire and change the wire state (using breadth-first traversal).
        * If a gate is found, updates to it are added/removed.
        * If a different state is found then new state is used from now on (when applicable) and errors are fixed at the end.
    1. Start by iterating through all of the updates.
        A. If this update is only cosmetic (stateChange is false), redraw the object and remove update.
        B. Else if update is for a gate, remove update, mark the new state it will output (only off or on), and add to gateUpdates if state changed.
        C. Else if update is for a switch, remove update and add to switchUpdates.
        D. Else if update is for a button, remove update and add to buttonUpdates.
        E. Else if update is for an LED, remove update and add to LEDUpdates.    // May not need to separate out all the updates like this! #############################
        F. Else if update is for a blank tile, remove it.
        G. Only wire updates from user edits will be left over, remember if any are left for later.
    2. Iterate switchUpdates, buttonUpdates, and gateUpdates, traverse outputs along wires using BFS.
    3. If wire updates remain, need to update these and adjacent tiles (because the wire could break a connection, broken wires default to low or tri-state where applicable).

Where we're at:
    - Working on wire path following. In order to check if a wire has already been visited for DFS we use a set of traversed wire.
    - In DFS loop, check if wire already visited. If wire is not a junction then we just skip to the next wire after updating state.
    - Otherwise if junction not visited then push it and its remaining paths to a stack, if junction was visited then remove this path from its remaining ones.
    - This will have pretty bad worst case time complexity, might be better to go with timestamp idea